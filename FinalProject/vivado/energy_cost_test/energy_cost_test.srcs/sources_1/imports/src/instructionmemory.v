//------------------------------------------------------------------------
// Instruction Memory
//   Positive edge triggered
//   dataOut always has the value mem[address]
//------------------------------------------------------------------------

module instructionmemory 
#(
    parameter cores = 1,
    parameter instructions = "string-reversal-4-cores-opttest.dat"
)
(
    input                       clk,
    input [31:0]                address,
    output reg [32*cores-1:0]   dataOut
);

    reg [32*cores-1:0] memory [2**10-1:0];

    initial $readmemb(instructions, memory);
    integer i;
    initial begin
//        memory[0] = 128'b00111000000010000000000000000000001110000000100100000000000001110011100000010001000000000000000100111000000100110000000000000011;
//        memory[1] = 128'b00000000000010000101100000100000000000010000100101101000001000000000000100110011011000000010101000000001001100010111100000101010;
//        memory[2] = 128'b00010001100000000000000000000001000100011111000100000000000001001000110110101110000000000000000010001101011011000000000000000000;
//        memory[3] = 128'b10101101101011000000000000000000101011010110111000000000000000000000100000000000000000000000011100000000000000000000000000000000;
//        memory[4] = 128'b10101101101011000000000000000000101011010110111000000000000000000000000101110001010010000010000000000001101100010101000000100010;
//        memory[5] = 128'b10001101001011000000000000000000100011010100111000000000000000000000000100101010011110000010101000000001001000000101100000100000;
//        memory[6] = 128'b00000001010000000110100000100010000000000000000000000000000000000000000000000000000000000000000000010001111100011111111111111101;
//        memory[7] = 128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000111;
    end

    always @(address) begin
        dataOut <= memory[address>>2];
    end

endmodule
